
# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -std=c11
LDFLAGS = 
TARGET = jogo

# Source files
SRC = jogo.c

# Assets directory
ASSETS_DIR = assets

# Detect OS
UNAME_S := $(shell uname -s)

# Debug vs. Release
ifeq ($(DEBUG),1)
    CFLAGS += -g -O0
else
    CFLAGS += -O2
endif

# Raylib configuration
ifeq ($(shell pkg-config --exists raylib && echo 1),1)
    # Use pkg-config if available (recommended)
    CFLAGS += $(shell pkg-config --cflags raylib)
    LDFLAGS += $(shell pkg-config --libs raylib)
else
    # Platform-specific fallbacks
    ifeq ($(UNAME_S),Darwin)
        # macOS (Homebrew)
        CFLAGS += -I/opt/homebrew/include
        LDFLAGS += -L/opt/homebrew/lib -lraylib
        LDFLAGS += -framework OpenGL -framework Cocoa -framework IOKit
        LDFLAGS += -framework CoreAudio -framework CoreVideo
    else ifeq ($(UNAME_S),Linux)
        # Linux
        LDFLAGS += -lraylib -lm -ldl -lpthread -lGL -lrt -lX11
    else ifeq ($(UNAME_S),Windows_NT)
        # Windows (MinGW)
        LDFLAGS += -lraylib -lopengl32 -lgdi32 -lwinmm
    endif
endif

# Additional flags for all platforms
LDFLAGS += -lopenal

.PHONY: all clean run

all: $(TARGET) copy_assets

$(TARGET): $(SRC)
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

copy_assets:
	@mkdir -p $(ASSETS_DIR)
	@cp -r $(ASSETS_DIR)/ $(TARGET)_assets/ || true

run: $(TARGET) copy_assets
	./$(TARGET)

clean:
	rm -f $(TARGET)
	rm -rf $(TARGET)_assets

install: all
	@echo "Installing to /usr/local/games/$(TARGET)"
	@sudo mkdir -p /usr/local/games/$(TARGET)
	@sudo cp $(TARGET) /usr/local/games/$(TARGET)/
	@sudo cp -r $(ASSETS_DIR) /usr/local/games/$(TARGET)/ || true
